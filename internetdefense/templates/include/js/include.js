(function(){ /* * Simplified interface for working with cookies. * Adapted from http://www.quirksmode.org/js/cookies.html * * Functions: * cookie.write - Writes cookie * cookie.read - Returns value of cookie * cookie.delete - Deletes cookie * * Example: * >>> cookie.read('foo'); * null * >>> cookie.write('foo', 'bar'); * >>> cookie.read('foo'); * 'bar' * >>> cookie.delete('foo'); * >>> cookie.read('foo'); * null */ var cookie = { 'write': function(name, value, length) { var date = new Date(); date.setTime(date.getTime() + length); document.cookie = name + '=' + value + '; expires=' + date.toGMTString() + '; path=/'; }, 'read': function(name) { var nameEq = name + '='; var ca = document.cookie.split(';'); for(var i=0; i < ca.length; i++) { var c = ca[i]; while(c.charAt(0) == ' '){ c = c.substring(1, c.length); } if(c.indexOf(nameEq) === 0){ return c.substring(nameEq.length, c.length); } } return null; }, 'delete': function(name){ this.write(name, '', -1); } }; /* * Simplified interface for working with querystring parameters. * * Functions: * querystring.encode - creates serialized representation of an object, * suitable for use in a querystring * querystring.decode - deserializes querystring into object literal * * Example on http://example.tld/?foo=bar&baz=qux * >>> querystring.decode(); * {foo: 'bar', baz: 'qux'} * >>> querystring.encode({foo: 'bar', baz: 'qux'}) * foo=bar&baz=qux */ var querystring = { encode: function(obj){ var bits = []; for(var bit in obj) { if(obj.hasOwnProperty(bit)) { var key = encodeURIComponent(bit), value = encodeURIComponent(obj[bit]); bits.push(key + '=' + value); } } return bits.join("&"); }, decode: function(){ var urlParams = {}, plusToSpace = /\+/g, search = /([^&=]+)=?([^&]*)/g, decode = function(s){ return decodeURIComponent(s.replace(plusToSpace, ' ')); }, query = window.location.search.substring(1); while(match = search.exec(query)){ urlParams[decode(match[1])] = decode(match[2]); } return urlParams; } }; // Ensure that user hasn't opted out. var cookieName = '_idl_opt_out_' + '', optedOut = cookie.read(cookieName) == 'true'; if (optedOut) { return; } // Verify campaign. var qs = querystring.decode(); if (_idl.campaign && _idl.campaign !== 'stopwatchingusrally') { return 'Bailing'; } // Set variant. var variant = 'default'; if (qs.variant === 'modal') { variant = 'modal'; } window.tfrce_config = { show_style: variant }; (function(){ function detectUnsupportedBrowser() { var unsupported = false; if (navigator.appName == 'Microsoft Internet Explorer') { var ua = navigator.userAgent; var re = new RegExp("MSIE ([0-8]{1,}[\.0-8]{0,})"); if (re.exec(ua) != null) { unsupported = true; } } return unsupported; } if (detectUnsupportedBrowser()) { return; } var e = document.createElement('script'); e.type='text/javascript'; e.async = true; e.src = document.location.protocol + '//d1ux67szpr7bp0.cloudfront.net/project-megaphone/widget.min.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(e, s); })(); })(); 